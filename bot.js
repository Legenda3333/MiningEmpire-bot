import { Telegraf, Markup } from 'telegraf';
import { createClient } from '@supabase/supabase-js';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();

const bot = new Telegraf(process.env.TOKEN);
//const webAppUrl = 'https://mining-empire-game.web.app';

const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_API_KEY = process.env.SUPABASE_API_KEY;
const database = createClient(SUPABASE_URL, SUPABASE_API_KEY);

async function isImageAvailable(url) {
    try {
        const response = await fetch(url);
        return response.ok && response.headers.get('content-type').startsWith('image/');
    } catch (error) {
        return false;
    }
}

bot.start(async (ctx) => {
    const referal_id = ctx.startPayload;
    const id = ctx.from.id;
    const first_name = ctx.from.first_name || '';
    const last_name = ctx.from.last_name || '';
    const username = ctx.from.username || '';
    const language_code = ctx.from.language_code || '';
    const is_premium = ctx.from.is_premium || false; 

    const { data: existingUser } = await database
        .from('users')
        .select('*')
        .eq('telegram', id);

    const LoginUser = async (id, first_name, last_name, username, language_code, is_premium, referal_id) => {
        const time_reg = Math.floor(Date.now() / 1000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º telegram id –∏ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
        if (existingUser.length === 0) {
            const undefined_avatar = 'images/undefined_avatar.png';
            const profilePhotos = await ctx.telegram.getUserProfilePhotos(id);
            const avatar_url = profilePhotos.total_count > 0 
                ? await ctx.telegram.getFileLink(profilePhotos.photos[0][0].file_id)
                : undefined_avatar;

            const userData = referal_id !== "" && Number(referal_id) !== id
                ? { telegram: id, avatar_url: avatar_url, first_name: first_name, last_name: last_name, username: username, language: language_code, is_premium: is_premium, time_reg: time_reg, referal_id: referal_id }
                : { telegram: id, avatar_url: avatar_url, first_name: first_name, last_name: last_name, username: username, language: language_code, is_premium: is_premium, time_reg: time_reg };

            await database
                .from('users')
                .insert([userData]);
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            const currentAvatarUrl = existingUser[0].avatar_url;
            const isCurrentAvatarAvailable = await isImageAvailable(currentAvatarUrl);

            //–ï—Å–ª–∏ –∞–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Ç–æ –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ –Ω–æ–≤—É—é
            if (!isCurrentAvatarAvailable) {
                const undefined_avatar = 'images/undefined_avatar.png';
                const profilePhotos = await ctx.telegram.getUserProfilePhotos(id);
                const avatar_url = profilePhotos.total_count > 0 
                    ? await ctx.telegram.getFileLink(profilePhotos.photos[0][0].file_id)
                    : undefined_avatar;

                await database
                .from('users')
                .update({ avatar_url })
                .eq('telegram', id);
            }
        }
    };

    await LoginUser(id, first_name, last_name, username, language_code, is_premium, referal_id);

    ctx.replyWithHTML(
        'üëã <b>–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MiningEmpire!</b> üöÄ\n' +
        '\n'+
        '–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç —ç—Ç–∞–ø —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞, –∏ —É —Ç–µ–±—è –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∏—Ç—å –±—É–¥—É—â—É—é –º–æ–Ω–µ—Ç—É –¥–æ –µ√´ –ª–∏—Å—Ç–∏–Ω–≥–∞ –Ω–∞ –±–∏—Ä–∂–∞—Ö, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—è–≤–ª—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏! üí∞‚ú® \n' +
        '\n' +
        '<b>–í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n' +
        '–ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç ‚è≥ –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ–±—ã—Ç—ã–π –±–ª–æ–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—è–µ—Ç—Å—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ö –º–∞–π–Ω–∏–Ω–≥–æ–≤–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ ‚ö°Ô∏è–ß–µ–º –±–æ–ª—å—à–µ —É —Ç–µ–±—è –º–æ—â–Ω–æ—Å—Ç–∏, —Ç–µ–º –±–æ–ª—å—à–µ –º–æ–Ω–µ—Ç —Ç—ã –ø–æ–ª—É—á–∏—à—å! üí∏\n' +
        '\n' +
        '‚ùì <b>–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –º–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞?</b>\n' +
        '<b>1. –í—ã–ø–æ–ª–Ω—è–π –∑–∞–¥–∞–Ω–∏—è</b> üèÜ: –ü—Ä–æ—è–≤–ª—è–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è—è –∫–∞–∫ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–µ, —Ç–∞–∫ –∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã! ‚ö°Ô∏è\n' +
        '\n' +
        '<b>2. –ü–æ–∫—É–ø–∫–∏ –≤ –∏–≥—Ä–µ</b> ‚õèÔ∏è: –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏–∏–≥—Ä–æ–≤—ã—Ö –º–∞–π–Ω–µ—Ä–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –ø–æ–≤—ã—à–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏, –∞ –∫–∞–∫ —Å–ª–µ–¥—Å—Ç–≤–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª—å—à–∏—Ö –Ω–∞–≥—Ä–∞–¥! üíé\n' + 
        '\n' +
        '<b>3. –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π</b> üë•: –ó–æ–≤–∏ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –≤–µ–¥—å –≤–º–µ—Å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! –ê –∑–∞ —ç—Ç–æ —Ç—ã —Ç–æ–∂–µ –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å—ã! üåü\n' +
        '\n' +
        '<b>–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? –¢–æ–≥–¥–∞ —á–µ–≥–æ –∂–µ —Ç—ã –∂–¥√´—à—å?</b> üí™üî•',
        Markup.inlineKeyboard([
            [Markup.button.webApp('‚õèÔ∏è –ù–∞—á–∞—Ç—å', process.env.FRONTEND_URL)],
            [Markup.button.url('üì¢ –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª', process.env.CHANNEL)]
        ])
    );
    }
);


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
bot.on('pre_checkout_query', async (ctx) => {
    await ctx.answerPreCheckoutQuery(true);
});

//bot.launch();
bot.launch({
    webhook: {
        domain: process.env.BACKEND_URL,
        port: process.env.PORT,
    },
});

